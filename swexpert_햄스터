package swexpert;

import java.util.ArrayList;
import java.util.Scanner;

public class 햄스터 {
	static class hamster{
		int l;
		int r;
		int s;
		hamster(int l, int r, int s){
			this.l = l;
			this.r = r;
			this.s = s;
		}
	}
	private static int N;
	private static int X;
	private static int M;
	private static ArrayList<hamster> h;
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();
		for (int tc = 1; tc <= T; tc++) {
			System.out.print("#" + tc + " ");
			 N = sc.nextInt();
			 X = sc.nextInt();
			 M = sc.nextInt();
			
			 answer = "-1";
			 result = new int[N+1];
			 max = 0;
			 h = new ArrayList<>();
			for (int i = 0; i < M; i++) {
				h.add(new hamster(sc.nextInt(), sc.nextInt(), sc.nextInt()));
			}
			
			perm(1, 0);
			System.out.println(answer);
			
		}
	}
	static int max;
	private static int[] result;
	private static String answer;
	private static void perm(int idx, int value) {
		// TODO Auto-generated method stub
		
//		int[] x = new int[N+1];
//		int cnt = 0;
//		for (int i = 0; i < h.size(); i++) {
//			if(h.get(i).l <= idx && idx <= h.get(i).r) {
//				int sum = 0;
//				for (int j = h.get(i).l; j < idx; j++) {
//					sum += result[j];
//				}
//				x[cnt++]= h.get(i).s - sum;
//			}
//		}
//		for (int i = 0; i < x.length; i++) {
//			
//		}
		
		//(0, 5, 5)
		//hamster가장 많을때
		if(idx == N+1) {
			if(max < value) {
				boolean check = true;
				//l, r, s 조건 만족
				for (int i = 0; i < h.size(); i++) {
					int sum = 0;
					for (int j = h.get(i).l; j <= h.get(i).r; j++) {
						sum += result[j];
					}
					if(sum != h.get(i).s) {
						check = false;
						break;
					}
				}
				if(check) {
					StringBuilder sb = new StringBuilder();
					for (int i = 1; i < result.length; i++) {
						sb.append(result[i]).append(" ");
					}
					answer = sb.toString();
					max = value;
				}
			}
			
			return;
		}
		
		for (int i = 0; i <= X; i++) {
			result[idx] = i;
			perm(idx+1, value+i);
		}
		//(0 ,0 , 0)
		//(0, 0, 1)
		//(0, 0, 2)
		//(0, 0, 3)
		//(0, 1, 0)
		//(0, 1, 1)
		//.....
	}
}
