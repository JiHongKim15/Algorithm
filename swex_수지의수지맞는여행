package swexpert;

import java.util.HashSet;
import java.util.Scanner;

public class 수지의수지맞는여행 {
	static class Node {
		int r;
		int c;
		HashSet<Character> hs = new HashSet<>();

		Node(int r, int c, HashSet<Character> hs) {
			this.r = r;
			this.c = c;
			this.hs = hs;
		}
	}

	private static int R;
	private static int C;
	private static int max;
	private static char[][] map;
	private static int[] dr = {0, 0, 1, -1};
	private static int[] dc = {1, -1, 0, 0};
	private static boolean[] check;

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();
		for (int tc = 1; tc <= T; tc++) {
			 R = sc.nextInt();
			 C = sc.nextInt();

			 map = new char[R][C];
			 max = 0;
			for (int i = 0; i < R; i++) {
				String st = sc.next();
				for (int j = 0; j < C; j++) {
					map[i][j] = st.charAt(j);
				}
			}

			check = new boolean[27];
//			Queue<Node> q = new LinkedList<>();
//			HashSet<Character> hs = new HashSet<>();
//			hs.add(map[0][0]);
//			q.add(new Node(0, 0, hs));
//			check[0][0] = true;
//
//			int max = 0;
//			while (!q.isEmpty()) {
//				Node buf = q.poll();
//				if (max < buf.hs.size()) {
//					max = buf.hs.size();
//				}
//				for (int d = 0; d < dc.length; d++) {
//					int r = buf.r + dr[d];
//					int c = buf.c + dc[d];
//					if (r >= 0 && c >= 0 && r < R && c < C) {
//						if (!buf.hs.contains(map[r][c])) {
//							//값복사
//							HashSet<Character> hs2 = new HashSet<>(buf.hs);
//							hs2.add(map[r][c]);
//							q.add(new Node(r, c, hs2));
//						}
//					}
//				}
//				//?????????????
//			}
			
			dfs(0,0, 1);

			System.out.println("#" + tc +" " + max);

		}
	}

	private static void dfs(int cr, int cc, int cnt) {
		// TODO Auto-generated method stub
		max = Math.max(cnt, max);
		
		check[map[cr][cc] - 'A'] = true;
		
		for (int d = 0; d < dc.length; d++) {
			int r = cr + dr[d];
			int c = cc + dc[d];
			if (r >= 0 && c >= 0 && r < R && c < C) {
				if(!check[map[r][c] - 'A']) {
					dfs(r,c,cnt+1);
					check[map[r][c] - 'A'] = false;
				}
			}
		}
		
		
	}
	
	
}
